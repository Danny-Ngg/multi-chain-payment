{
  "version": "3.2",
  "log": [
    {
      "AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:49",
        "inherit": [
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:63"
            },
            {
              "contract": "AccessControlUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:219"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)43_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:8",
        "version": {
          "withMetadata": "fab4dcfcc5aedfdfc5b5ccf0dd16039256acf9322d857feae1443c6d9c8bda94",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:22",
        "inherit": [
          "IERC165Upgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC165Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "8377a2d26cdcf25e414c508e0ec9d34db8d166ccc33e52e5209c9df404015391",
          "withoutMetadata": "8b783e41adf6bc8cf93c4fe5ac95a8c32c1d75114dc1ff01a995eeb845bd40fd",
          "linkedWithoutMetadata": "8b783e41adf6bc8cf93c4fe5ac95a8c32c1d75114dc1ff01a995eeb845bd40fd"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "d9a5f2cb2c32788d2acae9fe6748b98cea96d3c43b0f763118d97d7e4359e553",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "ad1d67122ed5870963e047c02d00fe36d275faa0d9f9dee04051c6103107fe50",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2OracleLibrary": {
        "src": "@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol:7",
        "version": {
          "withMetadata": "e10df3d9549eb4d97a16c353af4dca9864424e63785ef7c01f9a7d46defd5b12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FilecoinOracle": {
        "src": "contracts/FilecoinOracle.sol:7",
        "version": {
          "withMetadata": "9749b48620cc7fd18ecd1c40b5f313da9b5bbac498eacaeb55439d2f7f7f1b65",
          "withoutMetadata": "390e4bf3a11ed6e56ed5a64064051e1fc98fec307ed74e3abc07ee3d179de6de",
          "linkedWithoutMetadata": "390e4bf3a11ed6e56ed5a64064051e1fc98fec307ed74e3abc07ee3d179de6de"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "(address)",
          "setDAOUsers(address[])",
          "getPaymentInfo(string)",
          "updatePaymentInfo(string,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FilecoinOracle",
            "src": "contracts/FilecoinOracle.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FilecoinOracle",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/FilecoinOracle.sol:13"
            },
            {
              "contract": "FilecoinOracle",
              "label": "_daoUsers",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FilecoinOracle.sol:14"
            },
            {
              "contract": "FilecoinOracle",
              "label": "statusMap",
              "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_struct(TxOracleStatus)2412_storage))",
              "src": "contracts/FilecoinOracle.sol:15"
            },
            {
              "contract": "FilecoinOracle",
              "label": "_threshold",
              "type": "t_uint8",
              "src": "contracts/FilecoinOracle.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_struct(TxOracleStatus)2412_storage))": {
              "label": "mapping(string => mapping(address => struct FilecoinOracle.TxOracleStatus))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_struct(TxOracleStatus)2412_storage)": {
              "label": "mapping(address => struct FilecoinOracle.TxOracleStatus)"
            },
            "t_struct(TxOracleStatus)2412_storage": {
              "label": "struct FilecoinOracle.TxOracleStatus",
              "members": [
                {
                  "label": "actualPaid",
                  "type": "t_uint256"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FilswanOracle": {
        "src": "contracts/FilswanOracle.sol:11",
        "version": {
          "withMetadata": "691b80d313c0e1d8530454e020f67eaf3b33053a4d71d392beb885b79ba46288",
          "withoutMetadata": "4a64add3c82d6df2d627ca785cdf00d3faae6161cbadcb84f4feb84abea9ef3c",
          "linkedWithoutMetadata": "4a64add3c82d6df2d627ca785cdf00d3faae6161cbadcb84f4feb84abea9ef3c"
        },
        "inherit": [
          "AccessControlUpgradeable",
          "ERC165Upgradeable",
          "IERC165Upgradeable",
          "IAccessControlUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint8)",
          "updateThreshold(uint8)",
          "setDAOUsers(address[])",
          "signTransaction(string,string,string,uint256,address,uint256,bool)",
          "isPaymentAvailable(string,string,string,uint256,address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FilswanOracle",
              "label": "_threshold",
              "type": "t_uint8",
              "src": "contracts/FilswanOracle.sol:15"
            },
            {
              "contract": "FilswanOracle",
              "label": "txInfoMap",
              "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_struct(TxOracleInfo)2659_storage))",
              "src": "contracts/FilswanOracle.sol:17"
            },
            {
              "contract": "FilswanOracle",
              "label": "txVoteMap",
              "type": "t_mapping(t_bytes32,t_uint8)",
              "src": "contracts/FilswanOracle.sol:18"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_struct(TxOracleInfo)2659_storage))": {
              "label": "mapping(string => mapping(address => struct FilswanOracle.TxOracleInfo))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_struct(TxOracleInfo)2659_storage)": {
              "label": "mapping(address => struct FilswanOracle.TxOracleInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(TxOracleInfo)2659_storage": {
              "label": "struct FilswanOracle.TxOracleInfo",
              "members": [
                {
                  "label": "paid",
                  "type": "t_uint256"
                },
                {
                  "label": "terms",
                  "type": "t_uint256"
                },
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "status",
                  "type": "t_bool"
                },
                {
                  "label": "flag",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_bytes32,t_uint8)": {
              "label": "mapping(bytes32 => uint8)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceFeed": {
        "src": "contracts/PriceFeed.sol:10",
        "version": {
          "withMetadata": "25f401c7ae15cfd1a7e8c7ae528e3412f0eef7f4c6f30cf6949cf6e4431b9634",
          "withoutMetadata": "0d4c8db34f593bc41056436f4cea830219953fff1283954b73d614291dc5046d",
          "linkedWithoutMetadata": "0d4c8db34f593bc41056436f4cea830219953fff1283954b73d614291dc5046d"
        },
        "inherit": [
          "IPriceFeed"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,uint8)",
          "consult(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceFeed",
              "label": "_dexPair",
              "type": "t_address",
              "src": "contracts/PriceFeed.sol:15"
            },
            {
              "contract": "PriceFeed",
              "label": "_tokenIndex",
              "type": "t_uint8",
              "src": "contracts/PriceFeed.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SwanPayment": {
        "src": "contracts/SwanPayment.sol:12",
        "version": {
          "withMetadata": "8f9962281dfc95fa2818f57746f9470c8065afeba5d98d0ecfab7614aa9f1ca7",
          "withoutMetadata": "5eba71b44de35f991962701512b13df69a2a3de755aa44b8b46fd35878aa7ccd",
          "linkedWithoutMetadata": "5eba71b44de35f991962701512b13df69a2a3de755aa44b8b46fd35878aa7ccd"
        },
        "inherit": [
          "Initializable",
          "IPaymentMinimal"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "initialize(address,address,address,address)",
          "setOracle(address)",
          "setPriceFeed(address)",
          "getLockedPaymentInfo(string)",
          "lockPayment((string,uint256,uint256,uint256,address))",
          "unlockPayment(string)",
          "lockTokenPayment((string,uint256,uint256,uint256,address))",
          "unlockTokenPayment((string,string,string,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SwanPayment",
              "label": "_ERC20_TOKEN",
              "type": "t_address",
              "src": "contracts/SwanPayment.sol:16"
            },
            {
              "contract": "SwanPayment",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/SwanPayment.sol:18"
            },
            {
              "contract": "SwanPayment",
              "label": "_oracle",
              "type": "t_address",
              "src": "contracts/SwanPayment.sol:19"
            },
            {
              "contract": "SwanPayment",
              "label": "_priceFeed",
              "type": "t_address",
              "src": "contracts/SwanPayment.sol:20"
            },
            {
              "contract": "SwanPayment",
              "label": "lockTime",
              "type": "t_uint256",
              "src": "contracts/SwanPayment.sol:22"
            },
            {
              "contract": "SwanPayment",
              "label": "txMap",
              "type": "t_mapping(t_string_memory_ptr,t_struct(TxInfo)3613_storage)",
              "src": "contracts/SwanPayment.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_string_memory_ptr,t_struct(TxInfo)3613_storage)": {
              "label": "mapping(string => struct IPaymentMinimal.TxInfo)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(TxInfo)3613_storage": {
              "label": "struct IPaymentMinimal.TxInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_string_storage"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "minPayment",
                  "type": "t_uint256"
                },
                {
                  "label": "lockedFee",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "recipient",
                  "type": "t_address"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256"
                },
                {
                  "label": "_isExisted",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPaymentMinimal": {
        "src": "contracts/interfaces/IPaymentGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLockedPaymentInfo(string)",
          "lockPayment((string,uint256,uint256,uint256,address))",
          "unlockPayment(string)",
          "lockTokenPayment((string,uint256,uint256,uint256,address))",
          "unlockTokenPayment((string,string,string,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "consult(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestERC20": {
        "src": "contracts/test/ERC20.sol:6",
        "version": {
          "withMetadata": "029bcf5e61bdbd40bbc06571ebc27fa24731cc9ae48c5ffd5cd4df54b3734e9c",
          "withoutMetadata": "64d54ff521c712897db18f35aa2facde55d5c64fe761b44e186344ddc4bfd256",
          "linkedWithoutMetadata": "64d54ff521c712897db18f35aa2facde55d5c64fe761b44e186344ddc4bfd256"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/test/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "f859a5dc6b3998617ae9be316697205112c912a754f10309c0a79f14ff35c758",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FixedPoint": {
        "src": "@uniswap/lib/contracts/libraries/FixedPoint.sol:4",
        "version": {
          "withMetadata": "2123928674b96446a84837e3d8532d38cb7a71f1e9ae9fbf8f115f458ba0d701",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@uniswap/v2-periphery/contracts/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "16e8a68b6d097b1ac66147cf528304330e10aedb79b4c6d240572094955f8f64",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "3feb8fd8aefdbb41506624b645202e56724643b28af4b49267506bfc5009d5f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2OracleLibrary": {
        "src": "@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol:7",
        "version": {
          "withMetadata": "9c3c90099294dc84668e38df162a9d5ced7454ba7fd526f883a4cdb7fe50b503",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "FixedPoint"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PriceOracleFeed": {
        "src": "contracts/PriceOracleFeed.sol:14",
        "version": {
          "withMetadata": "58720fd61efa401b8c565a826fe4851145e432c1cd8e15f13563d773c8549123",
          "withoutMetadata": "58720fd61efa401b8c565a826fe4851145e432c1cd8e15f13563d773c8549123",
          "linkedWithoutMetadata": "58720fd61efa401b8c565a826fe4851145e432c1cd8e15f13563d773c8549123"
        },
        "inherit": [
          "IPriceFeed"
        ],
        "libraries": [
          "FixedPoint",
          "UniswapV2Library",
          "UniswapV2OracleLibrary"
        ],
        "methods": [
          "(address,address,address)",
          "update()",
          "consult(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracleFeed",
            "src": "contracts/PriceOracleFeed.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracleFeed",
              "label": "pair",
              "type": "t_contract(IUniswapV2Pair)418",
              "src": "contracts/PriceOracleFeed.sol:19"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/PriceOracleFeed.sol:20"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/PriceOracleFeed.sol:21"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/PriceOracleFeed.sol:23"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/PriceOracleFeed.sol:24"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/PriceOracleFeed.sol:25"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "price0Average",
              "type": "t_struct(uq112x112)4_storage",
              "src": "contracts/PriceOracleFeed.sol:26"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "price1Average",
              "type": "t_struct(uq112x112)4_storage",
              "src": "contracts/PriceOracleFeed.sol:27"
            },
            {
              "contract": "PriceOracleFeed",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts/PriceOracleFeed.sol:30"
            }
          ],
          "types": {
            "t_contract(IUniswapV2Pair)418": {
              "label": "contract IUniswapV2Pair"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(uq112x112)4_storage": {
              "label": "struct FixedPoint.uq112x112",
              "members": [
                {
                  "label": "_x",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint224": {
              "label": "uint224"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "consult(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "02bef77e4d1481b0644ceea8157f1698ff884278c712f084c97cb90255064509",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}